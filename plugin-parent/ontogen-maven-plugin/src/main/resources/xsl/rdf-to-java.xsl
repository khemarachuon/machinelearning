<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" 
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" 
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:vs="http://www.w3.org/2003/06/sw-vocab-status/ns#"
	exclude-result-prefixes="rdf rdfs owl vs">
	
	<xsl:output method="xml" encoding="UTF-8" omit-xml-declaration="yes" />
	<xsl:param name="generator" />
	<xsl:param name="sourceUri" />
	<xsl:param name="package" />
	<xsl:param name="className" />
	<xsl:param name="namespace" />

<xsl:template match="/rdf:RDF">package <xsl:value-of select="$package" />;

import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.Resource;

/**
 * Vocabulary definitions from {@link <xsl:value-of select="$sourceUri" />}
 * @author Auto-generated by <xsl:value-of select="$generator" /> on <xsl:value-of select="format-dateTime(current-dateTime(), '[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01][zA]')" />
 */
public class <xsl:value-of select="$className" /> {

	/**
	 * <p>The RDF model that holds the vocabulary terms</p>
	 */
	private static final Model M_MODEL = ModelFactory.createDefaultModel();

	/**
	 * <p>The namespace of the vocabulary as a string</p>
	 */
	public static final String NS = "<xsl:value-of select="$namespace" />";

	/**
	 * <p>The namespace of the vocabulary as a string</p>
	 * 
	 * @return namespace as String
	 * @see #NS
	 */
	public static String getURI() {
		return NS;
	}

	/**
	 * <p>The namespace of the vocabulary as a resource</p>
	 */
	public static final Resource NAMESPACE = M_MODEL.createResource(NS);

	// -------------------------------------------------------------------------
	// Classes
	// -------------------------------------------------------------------------
<xsl:for-each select="rdfs:Class"><xsl:sort select="@rdf:about" />
	/**
<xsl:if test="@rdfs:label">	 * <p><xsl:value-of select="@rdfs:label" /></p>
</xsl:if>
	 * <p><xsl:value-of select="@rdfs:comment" /></p>
<xsl:if test="rdf:type or rdfs:subClassOf">
	 * 
	 * <table>
<xsl:for-each select="rdf:type"><xsl:sort select="@rdf:resource" />	 * <tr><td>Type: </td><td>{@link <xsl:value-of select="@rdf:resource" />}</td></tr>
</xsl:for-each><xsl:for-each select="rdfs:subClassOf[owl:Class/@rdf:about]"><xsl:sort select="owl:Class/@rdf:about" />	 * <tr><td>SubClassOf:       </td><td>{@link <xsl:value-of select="owl:Class/@rdf:about" />}</td></tr>
</xsl:for-each><xsl:for-each select="rdfs:subClassOf[@rdf:resource]"><xsl:sort select="@rdf:resource" />	 * <tr><td>SubClassOf:       </td><td>{@link <xsl:value-of select="@rdf:resource" />}</td></tr>
</xsl:for-each><xsl:for-each select="owl:equivalentClass"><xsl:sort select="@rdf:resource" />	 * <tr><td>EquivalentClass:  </td><td>{@link <xsl:value-of select="@rdf:resource" />}</td></tr>
</xsl:for-each><xsl:for-each select="owl:disjointWith"><xsl:sort select="@rdf:resource" />	 * <tr><td>DisjointWith:     </td><td>{@link <xsl:value-of select="@rdf:resource" />}</td></tr>
</xsl:for-each>	 * </table></xsl:if><xsl:if test="@vs:term_status='archaic'">	 * 
	 * @deprecated Archaic term. No replacement.
</xsl:if>	 */
<xsl:if test="@vs:term_status='archaic'">	@Deprecated
</xsl:if>	public static final Resource <xsl:value-of select="reverse(tokenize(@rdf:about, '/|#'))" /> = M_MODEL.createResource("<xsl:value-of select="@rdf:about" />");
</xsl:for-each>
	// -------------------------------------------------------------------------
	// Properties
	// -------------------------------------------------------------------------
<xsl:for-each select="rdf:Property"><xsl:sort select="@rdf:about" />
	/**
<xsl:if test="@rdfs:label">	 * <xsl:value-of select="@rdfs:label" />
</xsl:if>
	 * <p><xsl:value-of select="@rdfs:comment" /></p>
<xsl:if test="rdf:type or rdfs:domain or rdfs:range">
	 * 
<xsl:for-each select="rdf:type"><xsl:sort select="@rdf:resource" />	 * Type:   {@link <xsl:value-of select="@rdf:resource" />}
</xsl:for-each><xsl:for-each select="rdfs:domain"><xsl:sort select="@rdf:resource" />	 * Domain: {@link <xsl:value-of select="@rdf:resource" />}
</xsl:for-each><xsl:for-each select="rdfs:range"><xsl:sort select="@rdf:resource" />	 * Range:  {@link <xsl:value-of select="@rdf:resource" />}
</xsl:for-each></xsl:if><xsl:if test="@vs:term_status='archaic'">	 * 
	 * @deprecated Archaic term. No replacement.
</xsl:if>	 */
<xsl:if test="@vs:term_status='archaic'">	@Deprecated
</xsl:if>	public static final Property <xsl:value-of select="reverse(tokenize(@rdf:about, '/|#'))" /> = M_MODEL.createProperty("<xsl:value-of select="@rdf:about" />");
</xsl:for-each>
}
</xsl:template>
</xsl:stylesheet>
